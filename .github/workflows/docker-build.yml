name: Build and Push to Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 添加手动触发
    inputs:
      skip_tests:
        description: '跳过测试？'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: amap-tile-proxy

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:buildx-stable-1

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push multi-arch images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:amd64
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=registry

    - name: Verify multi-arch manifests
      if: github.event_name != 'pull_request'
      run: |
        echo "🔍 验证多架构镜像清单..."
        
        # 安装 jq 用于 JSON 解析
        sudo apt-get update && sudo apt-get install -y jq
        
        # 验证 latest 标签（应该是多架构）
        echo "=== latest 标签 ==="
        docker buildx imagetools inspect ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest || echo "latest 标签验证失败"
        
        echo "=== amd64 标签 ==="
        docker buildx imagetools inspect ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:amd64 || echo "amd64 标签验证失败"
        
        echo "=== arm64 标签 ==="  
        docker buildx imagetools inspect ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:arm64 || echo "arm64 标签验证失败"

    - name: Show build summary
      run: |
        echo "🎉 镜像构建和推送完成！"
        echo ""
        echo "📦 镜像信息:"
        echo "   仓库: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}"
        echo "   触发: ${{ github.event_name }}"
        echo "   提交: ${{ github.sha }}"
        echo ""
        echo "🏷️ 可用标签:"
        echo "   • latest    - 多架构镜像（自动选择）"
        echo "   • amd64     - x86/64 架构专用"
        echo "   • arm64     - ARM 架构专用"
        echo ""
        echo "🚀 使用命令:"
        echo "   # 自动选择架构（推荐）"
        echo "   docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo ""
        echo "   # 手动选择架构"
        echo "   docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:amd64    # x86服务器"
        echo "   docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:arm64    # ARM服务器"
        echo ""
        echo "   # 运行容器"
        echo "   docker run -d -p 8280:8080 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"

  test-images:
    needs: build-and-push
    if: github.event_name != 'pull_request' && !inputs.skip_tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Test ${{ matrix.arch }} image
      run: |
        echo "🧪 测试 ${{ matrix.arch }} 架构镜像..."
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}
        
        # 运行健康检查测试
        docker run -d --name test-${{ matrix.arch }} \
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ matrix.arch }}
        
        sleep 10
        
        # 检查容器状态
        if docker ps | grep -q "test-${{ matrix.arch }}"; then
          echo "✅ ${{ matrix.arch }} 镜像测试通过"
          docker stop test-${{ matrix.arch }}
          docker rm test-${{ matrix.arch }}
        else
          echo "❌ ${{ matrix.arch }} 镜像测试失败"
          docker logs test-${{ matrix.arch }}
          exit 1
        fi